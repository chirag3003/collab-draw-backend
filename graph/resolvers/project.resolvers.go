package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"

	"github.com/chirag3003/collab-draw-backend/graph/model"
	"github.com/chirag3003/collab-draw-backend/internal/models"
	"go.mongodb.org/mongo-driver/v2/bson"
)

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input model.NewProject) (string, error) {
	project := &models.Project{
		Name:     input.Name,
		AppState: "",
		Elements: "",
	}
	if input.Description != nil {
		project.Description = *input.Description
	}

	if input.Workspace != nil {
		id, err := bson.ObjectIDFromHex(*input.Workspace)
		if err != nil {
			return "", fmt.Errorf("invalid workspace ID: %v", err)
		}
		project.Workspace = &id
	}

	ownerID, err := bson.ObjectIDFromHex(input.Owner)
	if err != nil {
		return "", fmt.Errorf("invalid owner ID: %v", err)
	}
	project.Owner = ownerID
	err = r.Repo.Project.NewProject(ctx, project)
	if err != nil {
		return "", fmt.Errorf("failed to create project: %v", err)
	}
	return "project created successfully", nil
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, id string, appState string, elements string) (bool, error) {
	err := r.Repo.Project.UpdateProject(ctx, id, appState, elements)
	if err != nil {
		return false, fmt.Errorf("failed to update project: %v", err)
	}
	return true, nil
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, id string) (bool, error) {
	success, err := r.Repo.Project.DeleteProject(ctx, id)
	if err != nil {
		return false, fmt.Errorf("failed to delete project: %v", err)
	}
	return success, nil
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context) ([]*model.Project, error) {
	projects, err := r.Repo.Project.GetAll(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch projects: %v", err)
	}
	var result []*model.Project
	for _, p := range projects {
		var workspace *string = nil
		if p.Workspace != nil {
			hex := p.Workspace.Hex()
			workspace = &hex
		}
		result = append(result, &model.Project{
			ID:          p.ID.Hex(),
			Name:        p.Name,
			Description: &p.Description,
			Owner:       p.Owner.Hex(),
			Workspace:   workspace,
			Personal:    p.Personal,
			AppState:    p.AppState,
			Elements:    p.Elements,
			CreatedAt:   p.CreatedAt,
		})
	}
	return result, nil
}

// Project is the resolver for the project field.
func (r *queryResolver) Project(ctx context.Context, id string) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: Project - project"))
}

// ProjectsByUser is the resolver for the projectsByUser field.
func (r *queryResolver) ProjectsByUser(ctx context.Context, userID string) ([]*model.Project, error) {
	panic(fmt.Errorf("not implemented: ProjectsByUser - projectsByUser"))
}

// ProjectsByWorkspace is the resolver for the projectsByWorkspace field.
func (r *queryResolver) ProjectsByWorkspace(ctx context.Context, workspaceID string) ([]*model.Project, error) {
	panic(fmt.Errorf("not implemented: ProjectsByWorkspace - projectsByWorkspace"))
}
