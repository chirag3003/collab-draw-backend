package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"

	"github.com/chirag3003/collab-draw-backend/graph/model"
	"github.com/chirag3003/collab-draw-backend/internal/models"
)

// CreateWorkspace is the resolver for the createWorkspace field.
func (r *mutationResolver) CreateWorkspace(ctx context.Context, input model.NewWorkspace) (string, error) {
	workspace := models.Workspace{
		Name:        input.Name,
		Description: input.Description,
		Owner:       input.Owner,
		Members:     []string{},
	}
	err := r.Repo.Workspace.CreateWorkspace(ctx, &workspace)
	if err != nil {
		return "", fmt.Errorf("failed to create workspace: %v", err)
	}
	return "", nil
}

// DeleteWorkspace is the resolver for the deleteWorkspace field.
func (r *mutationResolver) DeleteWorkspace(ctx context.Context, id string) (bool, error) {
	err := r.Repo.Workspace.DeleteWorkspace(ctx, id)
	if err != nil {
		return false, fmt.Errorf("failed to delete workspace: %v", err)
	}
	return true, nil
}

// Workspaces is the resolver for the workspaces field.
func (r *queryResolver) Workspaces(ctx context.Context) ([]*model.Workspace, error) {
	workspaces, err := r.Repo.Workspace.GetAllWorkspaces(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch workspaces: %v", err)
	}
	var result []*model.Workspace
	for _, ws := range workspaces {
		result = append(result, &model.Workspace{
			ID:          ws.ID.Hex(),
			Name:        ws.Name,
			Description: ws.Description,
			Owner:       ws.Owner,
			Members:     ws.Members,
			CreatedAt:   ws.CreatedAt,
		})
	}
	return result, nil
}

// Workspace is the resolver for the workspace field.
func (r *queryResolver) Workspace(ctx context.Context, id string) (*model.Workspace, error) {
	workspace, err := r.Repo.Workspace.GetWorkspaceByID(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch workspace: %v", err)
	}
	if workspace == nil {
		return nil, nil // or return an error if preferred
	}
	return &model.Workspace{
		ID:          workspace.ID.Hex(),
		Name:        workspace.Name,
		Description: workspace.Description,
		Owner:       workspace.Owner,
		Members:     workspace.Members,
		CreatedAt:   workspace.CreatedAt,
	}, nil
}

// WorkspacesByUser is the resolver for the workspacesByUser field.
func (r *queryResolver) WorkspacesByUser(ctx context.Context, userID string) ([]*model.Workspace, error) {
	workspaces, err := r.Repo.Workspace.GetWorkspacesByUser(ctx, userID)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch workspaces for user: %v", err)
	}
	var result []*model.Workspace
	for _, ws := range *workspaces {
		result = append(result, &model.Workspace{
			ID:          ws.ID.Hex(),
			Name:        ws.Name,
			Description: ws.Description,
			Owner:       ws.Owner,
			Members:     ws.Members,
			CreatedAt:   ws.CreatedAt,
		})
	}
	return result, nil
}

// SharedWorkspacesByUser is the resolver for the sharedWorkspacesByUser field.
func (r *queryResolver) SharedWorkspacesByUser(ctx context.Context, userID string) ([]*model.Workspace, error) {
	workspaces, err := r.Repo.Workspace.GetSharedWorkspaces(ctx, userID)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch shared workspaces for user: %v", err)
	}
	var result []*model.Workspace
	for _, ws := range *workspaces {
		result = append(result, &model.Workspace{
			ID:          ws.ID.Hex(),
			Name:        ws.Name,
			Description: ws.Description,
			Owner:       ws.Owner,
			Members:     ws.Members,
			CreatedAt:   ws.CreatedAt,
		})
	}
	return result, nil
}
